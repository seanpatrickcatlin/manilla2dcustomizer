#!/usr/bin/python## Manilla 2D Customizer# One step build and release script# import osimport sysimport timedef readFileVersion(fileName):    try:        f = file(fileName)    except IOError:        return ""    st = f.read()    ar = st.split()    major = ar.index("PRODUCT_VERSION_MAJOR")    minor = ar.index("PRODUCT_VERSION_MINOR")    qfe   = ar.index("PRODUCT_VERSION_QFE")    version=ar[major+1] + "." + ar[minor+1] + "." + ar[qfe+1]    return version    def get_last_svn_rev():    lastRev=-1    cmd = "\"" + SVN_PATH + " info " + SVN_REPOSITORY + "\""    for line in os.popen(cmd, 'r').readlines():        pos = line.find("Revision: ")        if pos != -1:            lastRev = int(line.split()[1])    return lastRev    def incMinor(versionString):    verList=versionString.split(".")    verList[1]=str(int(verList[1])+1)    return verList[0]+"."+verList[1]+"."+verList[2]def setVerSvnRev(versionString, revision):    verList=versionString.split(".")    verList[2]=str(revision)    return verList[0]+"."+verList[1]+"."+verList[2]    def setFileVersion(fileName, version):    try:        f = open(fileName, "r")    except IOError:        return    fileArray = f.readlines()    f.close()        ext = fileName[fileName.rfind('.')+1:]        if(ext == "h"):        verArray = version.split('.')                count = 0                for line in fileArray:            if(line.find("#define PRODUCT_VERSION_MAJOR ") != -1):                fileArray[count] = line[0: line.rfind(' ')+1] + verArray[0] + "\n"            elif(line.find("#define PRODUCT_VERSION_MINOR ") != -1):                fileArray[count] = line[0: line.rfind(' ')+1] + verArray[1] + "\n"            elif(line.find("#define PRODUCT_VERSION_QFE ") != -1):                fileArray[count] = line[0: line.rfind(' ')+1] + verArray[2] + "\n"                        count = count+1                elif(ext == "xml"):        count = 0        for line in fileArray:            if(line.find("<version>") != -1):                fileArray[count] = "  <version>" + version + "</version>\n"                        count += 1            try:        f = open(fileName, "w")    except IOError:        return    f.writelines(fileArray)    f.close()            return ############################# ## the actual implementation code##############################ORIGINAL_VERSION_H_FILE = "..\\Manilla2DConfig\\Manilla2DConfig\\version.h"VERSION_FILES_TO_UPDATE = []VERSION_FILES_TO_UPDATE.append("..\\Manilla2DConfig\\Manilla2DConfig\\version.h")VERSION_FILES_TO_UPDATE.append("..\\Manilla2DConfig\\Manilla2DConfig\\M2DC.xml")SVN_PATH = "\"C:\\\\Program Files\\\\Subversion\\\\bin\\\\svn.exe\""SVN_REPOSITORY = "https://manilla2dcustomizer.googlecode.com/svn"## (Step 1) # Update svn repositorycmd = "\"" + SVN_PATH + " update " + SVN_REPOSITORY + "..\\\""os.popen(cmd)## (Step 2)# Get the original file verisonverStr = readFileVersion(ORIGINAL_VERSION_H_FILE)print "Original File: " + ORIGINAL_VERSION_H_FILEprint "File Version: " + verStr## (Step 3)# Get the latest revision number of the svn repositorylast_svn_rev = get_last_svn_rev()print "Current SVN Revision: " + str(last_svn_rev)## (Step 4)# Increment the minor build number, set the svn revision numbernew_svn_rev = last_svn_rev+1print "New SVN Revision: " + str(new_svn_rev)verStr = setVerSvnRev(incMinor(verStr), new_svn_rev)print "New Version String: " + verStr## (Step 5)# Write the new filesfor fileToUpdate in VERSION_FILES_TO_UPDATE:    setFileVersion(fileToUpdate, verStr)    count=1    ## (Step 5)# Output the version string and open notepad for editing changelog.txtprint time.ctime()print "NewVersion: " + verStros.system("notepad.exe changelog.txt")####################################### END OF SCRIPT #############tempInput=raw_input('Press enter to continue')######### DONE ########## (Step 5)# commit the modified files M2DC.xml, verison.h, changelog.txt# # (Step 6)# build the solution to get the cab file# # (Step 8)# rename the cab file M2DC_vA.B.C.CAB# (Step 8)# 